---
title: "Data Table View v1.0"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    source_code: embed
    navbar:
      - { title: "Index Page", href: "file:///L:/RACAD/MarketingAnalysis/MarketingAnalysisProject/Index.html", align: left }
---

```{r setup, include=TRUE}

# Set up the script to be quiet when running
knitr::opts_knit$set(progress = FALSE, verbose = FALSE)

# Load all the libraries required
library(flexdashboard)
library(plotly)
library(plyr)
library(DT)

DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
{
  if (Debug==TRUE) {print("Loading data")}
  
  df = read.csv("2018 Customer Revenue Analysis - v2.41.csv",
                na.strings=c("", " "),stringsAsFactors=TRUE)
  
  
  # Convert to USD
  NewDF <- data.frame(Firm = df$FIRM,
                      Year = df$Cyear,
                      Period = df$Fqtr,
                      Base.CCY = df$BASE.CCY,
                      CMDName = df$CM.DIV,
                      Region=df$REGION,
                      Country=df$COUNTRY,
                      Est = df$EST,
                      Grev = df$GREV,
                      GPBT = df$GPBT,
                      IBrev = df$IBREV,
                      IBPBT = df$IBPBT,
                      CM.FICC = df$S.T.FICC,
                      CM.EQT = df$S.T.EQT,
                      CM.OTH = df$S.T.OTH,
                      USD = df$USDrate)
  
  # Transform to numeric
  NewDF$Grev         <- as.numeric(NewDF$Grev)
  NewDF$GPBT         <- as.numeric(NewDF$GPBT)
  NewDF$IBrev        <- as.numeric(NewDF$IBrev)
  NewDF$IBPBT        <- as.numeric(NewDF$IBPBT)
  NewDF$CM.FICC      <- as.numeric(NewDF$CM.FICC)
  NewDF$CM.EQT       <- as.numeric(NewDF$CM.EQT)
  NewDF$CM.OTH       <- as.numeric(NewDF$CM.OTH)
  NewDF$USD         <- as.numeric(NewDF$USD)
  
  # Convert to factors
  NewDF$Firm         <- factor(NewDF$Firm)
  NewDF$Year         <- factor(NewDF$Year)
  NewDF$Region       <- factor(NewDF$Region)
  NewDF$Country      <- factor(NewDF$Country)
  NewDF$Base.CCY      <- factor(NewDF$Base.CCY)
  NewDF$Period      <- factor(NewDF$Period)

  # Fix estimate column
  NewDF$Est <- ifelse(NewDF$Est == "EST",1,0)
  
  if (Debug==TRUE) {print("Finished loading test data")}
  
  return(NewDF)
  
}

theme_AI <- function()
{
  
  palette <- c("#FFFFFF", "#F0F0F0", "#A7A8AA", "#BDBDBD", "#969696", "#16C5A8",
               "#525252", "#252525", "#000000")
  
  color.background = palette[1]
  color.grid.major = palette[2]
  color.axis.text = palette[7]
  color.axis.title = palette[7]
  color.title = palette[9]
  
  theme_bw(base_size=10) +
    
    theme(
      
      panel.background=element_rect(fill=color.background, color=color.background),
      plot.background=element_rect(fill=color.background, color=color.background),
      panel.border=element_rect(color=color.background),
      
      legend.position = "top",
      
      panel.grid.major=element_line(color=color.grid.major,size=.25),
      panel.grid.minor=element_blank(),
      
      axis.ticks=element_blank(),
      
      legend.background = element_rect(fill=color.background),
      legend.key = element_rect(fill=color.background, color=NA),
      legend.text = element_text(size=10,color=color.axis.title),
      
      plot.title=element_text(color=color.title, size=13, vjust=1.25),
      plot.subtitle=element_text(color=color.title, size=12, vjust=1.25),
      axis.text.x=element_text(size=10,color=color.axis.text),
      axis.text.y=element_text(size=10,color=color.axis.text),
      axis.title.x=element_text(size=11,color=color.axis.title, vjust=0),
      axis.title.y=element_text(size=11,color=color.axis.title, vjust=1.25),
      
      plot.margin  = unit(c(0.1, 0.1, 0.9, 0.1), "cm")
      
    )
  
}

df <- DataLoadAndFormat(Debug=FALSE)

```
Data Import (RAW format)
=======================================================================

Column {data-width=650}
-----------------------------------------------------------------------

### Data Table

```{r Analysis, fig.height=4, fig.width=5, message=FALSE, warning=FALSE, paged.print=FALSE}

#df <- subset(df,df$Firm != "Daiwa")
ColumnsToApplySizeTo <- seq(1,ncol(df))

# Print out the data table
DT::datatable(df, options = list(pageLength = 200,
          initComplete = JS(
        "function(settings, json) {",
        "$(this.api().table().header()).css({'font-size': '70%'});",
        "}")) ) %>%
  DT::formatStyle(columns = ColumnsToApplySizeTo, fontSize = '70%')

```

Data Import with Exchange Rates Applied
=======================================================================

Column {data-width=650}
-----------------------------------------------------------------------

### Data Table - Selected instrument

```{r}

df <- na.omit(df)

# Convert to USD
df$Grev         <- df$Grev * df$USD
df$GPBT         <- df$GPBT * df$USD
df$IBrev        <- df$IBrev * df$USD
df$IBPBT        <- df$IBPBT * df$USD
df$CM.FICC      <- df$CM.FICC * df$USD
df$CM.EQT       <- df$CM.EQT * df$USD
df$CM.OTH       <- df$CM.OTH * df$USD
    
# Print out the data table
ColumnsToApplySizeTo <- seq(1,ncol(df))
DT::datatable(df, options = list(pageLength = 200,
          initComplete = JS(
        "function(settings, json) {",
        "$(this.api().table().header()).css({'font-size': '70%'});",
        "}")) ) %>%
  DT::formatStyle(columns = ColumnsToApplySizeTo, fontSize = '70%')

```

